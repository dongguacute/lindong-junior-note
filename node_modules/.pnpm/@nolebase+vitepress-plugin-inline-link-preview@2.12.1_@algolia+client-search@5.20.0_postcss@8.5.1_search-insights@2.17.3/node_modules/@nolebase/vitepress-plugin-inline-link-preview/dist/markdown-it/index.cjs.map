{"version":3,"file":"index.cjs","sources":["../../src/markdown-it/index.ts"],"sourcesContent":["import type { PluginWithOptions } from 'markdown-it'\nimport { ElementTransform } from '@nolebase/markdown-it-element-transform'\n\nexport const InlineLinkPreviewElementTransform: PluginWithOptions<{ tag: string } | null | undefined> = (md, options) => {\n  const tagName = options?.tag || 'VPNolebaseInlineLinkPreview'\n\n  md.use(ElementTransform, (() => {\n    let transformNextLinkCloseToken = false\n    let transformNextHtmlInlineCloseToken = false\n\n    return {\n      transform(token) {\n        switch (token.type) {\n          case 'html_inline':\n            if (/<a.*data-inline-link-preview=\"false\".*>/.test(token.content))\n              return\n\n            if (/<a.*class=\"header-anchor\"|\".* header-anchor\"|\"header-anchor .*\"|\".* header-anchor [^\\n\\r\"\\u2028\\u2029]*\".*>/.test(token.content))\n              return\n\n            if (/<a.*class=\"no-inline-link-preview\"|\".* no-inline-link-preview\"|\"no-inline-link-preview .*\"|\".* no-inline-link-preview [^\\n\\r\"\\u2028\\u2029]*\".*>/.test(token.content))\n              return\n\n            if (!transformNextHtmlInlineCloseToken && /<a/.test(token.content)) {\n              token.content = token.content.replace(/<a/, `<${tagName}`)\n              transformNextHtmlInlineCloseToken = true\n            }\n            else if (transformNextHtmlInlineCloseToken && /<\\/a/.test(token.content)) {\n              token.content = token.content.replace(/<\\/a/, `</${tagName}`)\n              transformNextHtmlInlineCloseToken = false\n            }\n\n            break\n          case 'link_open':\n            if (!token.attrGet('href'))\n              return\n\n            if (token.attrGet('class')?.includes('header-anchor'))\n              return\n\n            if (token.attrGet('class')?.includes('no-inline-link-preview'))\n              return\n\n            if (token.attrGet('data-inline-link-preview') === 'false')\n              return\n\n            token.tag = tagName\n            transformNextLinkCloseToken = true\n\n            break\n          case 'link_close':\n            if (!transformNextLinkCloseToken)\n              return\n\n            token.tag = tagName\n            transformNextLinkCloseToken = false\n\n            break\n        }\n      },\n    }\n  })())\n}\n"],"names":["ElementTransform"],"mappings":";;;;AAGa,MAAA,iCAAA,GAA2F,CAAC,EAAA,EAAI,OAAY,KAAA;AACvH,EAAM,MAAA,OAAA,GAAU,SAAS,GAAO,IAAA,6BAAA;AAEhC,EAAG,EAAA,CAAA,GAAA,CAAIA,6DAAyB,CAAA,MAAA;AAC9B,IAAA,IAAI,2BAA8B,GAAA,KAAA;AAClC,IAAA,IAAI,iCAAoC,GAAA,KAAA;AAExC,IAAO,OAAA;AAAA,MACL,UAAU,KAAO,EAAA;AACf,QAAA,QAAQ,MAAM,IAAM;AAAA,UAClB,KAAK,aAAA;AACH,YAAI,IAAA,yCAAA,CAA0C,IAAK,CAAA,KAAA,CAAM,OAAO,CAAA;AAC9D,cAAA;AAEF,YAAI,IAAA,6GAAA,CAA8G,IAAK,CAAA,KAAA,CAAM,OAAO,CAAA;AAClI,cAAA;AAEF,YAAI,IAAA,iJAAA,CAAkJ,IAAK,CAAA,KAAA,CAAM,OAAO,CAAA;AACtK,cAAA;AAEF,YAAA,IAAI,CAAC,iCAAqC,IAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,OAAO,CAAG,EAAA;AAClE,cAAA,KAAA,CAAM,UAAU,KAAM,CAAA,OAAA,CAAQ,QAAQ,IAAM,EAAA,CAAA,CAAA,EAAI,OAAO,CAAE,CAAA,CAAA;AACzD,cAAoC,iCAAA,GAAA,IAAA;AAAA,uBAE7B,iCAAqC,IAAA,MAAA,CAAO,IAAK,CAAA,KAAA,CAAM,OAAO,CAAG,EAAA;AACxE,cAAA,KAAA,CAAM,UAAU,KAAM,CAAA,OAAA,CAAQ,QAAQ,MAAQ,EAAA,CAAA,EAAA,EAAK,OAAO,CAAE,CAAA,CAAA;AAC5D,cAAoC,iCAAA,GAAA,KAAA;AAAA;AAGtC,YAAA;AAAA,UACF,KAAK,WAAA;AACH,YAAI,IAAA,CAAC,KAAM,CAAA,OAAA,CAAQ,MAAM,CAAA;AACvB,cAAA;AAEF,YAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,OAAO,CAAA,EAAG,SAAS,eAAe,CAAA;AAClD,cAAA;AAEF,YAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,OAAO,CAAA,EAAG,SAAS,wBAAwB,CAAA;AAC3D,cAAA;AAEF,YAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,0BAA0B,CAAM,KAAA,OAAA;AAChD,cAAA;AAEF,YAAA,KAAA,CAAM,GAAM,GAAA,OAAA;AACZ,YAA8B,2BAAA,GAAA,IAAA;AAE9B,YAAA;AAAA,UACF,KAAK,YAAA;AACH,YAAA,IAAI,CAAC,2BAAA;AACH,cAAA;AAEF,YAAA,KAAA,CAAM,GAAM,GAAA,OAAA;AACZ,YAA8B,2BAAA,GAAA,KAAA;AAE9B,YAAA;AAAA;AACJ;AACF,KACF;AAAA,MACE,CAAA;AACN;;;;"}